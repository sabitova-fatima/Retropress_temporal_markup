##### includes #####

# setwd("C:/Users/User/Desktop")

install.packages("reticulate")
library(reticulate)
library(rjson)
library(tidyverse)
library(lubridate)

##### imports #####

mon <- fromJSON(file = "dflags.json") # the dictionary file
week <- fromJSON(file = "dflags.json") # the dictionary file
week <- fromJSON(file = "dflags.json") # the dictionary file

mon[1] == '01' #TRUE
mon[1][1] == '01' #TRUE

mon_names = names(mon)
week_names = names(week)

flags <- fromJSON(file = "dflags.json")
flags_num <- fromJSON(file = "dflags.json")

samples <- read.csv("temporal-thesaurus-analytical-corpora-example.csv", encoding="UTF-8")

now <- "2020-11-27T2:30"

# View(samples)
# in_сsv <- read.csv("submission (3).csv")
# df = data.frame(date=c("2012-02-01", "2012-02-01", "2012-02-02")) 
# df$day <- weekdays(as.Date(df$date))


##### tests #####

input = "вчера"
input <- unlist(strsplit(input, ' '))

c = 'ноябрьский'
as.character(mon[which(mon_names == c)]) #outputs the value

c = 'мартовским'
as.character(mon[which(mon_names == c)]) #outputs the value

c = 'восьмой месяц'
as.character(mon[which(mon_names == c)]) #outputs the value

c = 'дек'
as.character(mon[which(mon_names == c)]) #outputs the value

c = 'новогодний месяц'
as.character(mon[which(mon_names == c)]) #outputs the value

c = 'июня'
as.character(mon[which(mon_names == c)]) #outputs the value


##### function for classic input #####

mon <- fromJSON(file = "dflags.json") # the dictionary file
week <- fromJSON(file = "dflags.json") # the dictionary file

return_date_str <- function(input)
{
  write(input, "input.txt")
  source_python("dnums_v0.4.py")
  split <- unlist(strsplit(res, ' '))
  split
  
  month <- 11;
  for (i in 1:length(split)){
    for (j in 1:length(mon_names)) {
      if (split[i] == mon_names[j]) {
        month <- as.character(mon[which(mon_names == mon_names[j])])
      }
    }
  }
  is_week = FALSE;
  week <- NULL;
  for (i in 1:length(split)){
    for (j in 1:length(week_names)) {
      if (split[i] == week_names[j]) {
        month <- as.character(mon[which(week_names == week_names[j])])
        is_week = TRUE;
      }
    }
  }
  
  is_year = FALSE
  year <- 2020;
  for (i in 1:length(split)){
    is_year <- ((str_detect(split[i], "19\\d\\d")) 
                || (str_detect(split[i], "20\\d\\d")))
    if (is_year){
      year <- split[i]
      is_year = TRUE
      year_index = i
    }
  }
  
  is_day = FALSE
  day <- 27;
  for (i in 1:length(split)){
    is_day <- ((str_detect(split[i], "\\d\\d") 
                || str_detect(split[i], "\\d")) && i != year_index)
    if (is_day && split[i+1] != "утра" && split[i+1] != "дня" 
        && split[i+1] != "вечера" && split[i+1] != "часов" && split[i+1] != "минут"){
      day <- str_extract_all(split[i],"\\(?[0-9,.]+\\)?")[[1]]
      day_index = i
      is_day = TRUE
      break
    }
  }
  
  # minutes always come after hours
  
  hour <- 02;
  for (i in 1:length(split)){
    is_hour <- ((str_detect(split[i], "\\d\\d") 
                 || str_detect(split[i], "\\d")) 
                && i != year_index
                && i != day_index)
    if (is_hour){
      hour <- str_extract(split[i],  "\\d");
      hour_index = i
      break
    }
  }
  
  min <- 30;
  for (i in 1:length(split)){
    is_min <- ((str_detect(split[i], "\\d\\d") 
                || str_detect(split[i], "\\d"))
               && i != year_index
               && i != day_index
               && i != hour_index
               && split[i + 1] == "минут")
    if (is_min){
      min <- str_extract(split[i],  "\\d")
      break
    }
  }
  
  if (is.null(min) && !is.null(hour)){
    min <- "00"
  }
  
  if (!is.null(day) && nchar(day) < 2){
    day <- glue::glue('0', day)
  }
  
  if (!is.null(hour) && nchar(hour) < 2){
    hour <- glue::glue('0', hour)
  }
  
  if (!is.null(min) && nchar(min) < 2){
    min <- glue::glue('0', min)
  }

  res <- glue::glue(year, month, day, .sep = '-', na.rm = TRUE)
  res <- glue::glue(res, hour, .sep = 'T', na.rm = TRUE)
  res <- glue::glue(res, min, .sep = ':', na.rm = TRUE)
 # return(res)
  return(ymd_hm(res))
}

##### function testing #####

input <- "1990 года 5 января 9 часов 3 минуты утра"
input <- "1990 года 5 ноября" 
input <- "1990 года " # delete month
input <- "10 часов 30 минут утра" # fix!

return_date_str(input)

##### function for periods #####

period <- function(input)
{
  return("not finished yet")
}

##### today #####

today <- function(input){
  return(now)
}

input <- unlist(strsplit("в эту минуту", ' '))

today(input)

##### yesterday #####

yesterday <- function(input){
  return("2020-11-26T2:30")
}

##### day shift #####

flags <- fromJSON(file = "dflags.json")
flags_num <- fromJSON(file = "dflags.json")
flags_how <- fromJSON(file = "dflag2.json")

# number of ___ shifted

shift_num <- function(input){
  sh <- NULL;
  for (i in 1:length(input)){
    for (j in 1:length(flags)) {
      if (input[i] == names(flags)[j]) {
        sh <- as.character(flags[which(names(flags) == names(flags)[j])])
      }
    }
  }
  
  n <- 1;
  for (i in 1:length(input)){
    for (j in 1:length(flags_num)) {
      if (input[i] == names(flags_num)[j]) {
        n <- as.character(flags_num[which(names(flags_num) == names(flags_num)[j])])
      }
    }
  }
  return (n * as.integer(sh))
}

shift_how <- function (input) {
  how <- NULL;
  for (i in 1:length(input)){
    for (j in 1:length(flags_how)) {
      if (input[i] == names(flags_how)[j]) {
        how <- as.character(flags_how[which(names(flags_how) == names(flags_how)[j])])
      }
    }
  }
  return (how)
}

shift <- function (sh, how) {
  if (how == "d")
  {
    return(as.Date(return_date_str(input)) + as.integer(sh)) 
  } else if (how == "y") {
    return (0)
  } else if (how == "m") {
    return (0)
  } else if (how == "w") {
    return (0)
  }
}

t <- function()
{
  input <- unlist(strsplit("два дня назад", ' '))
  sh <- shift_num(input)
  how <- shift_how(input)
  shift(sh, how)
}

##### Quartals #####
# 
# quartals <- function (input){
#   year <- "2020"
#   for (i in 1:length(input)){
#     is_year <- ((str_detect(input[i], "19\\d\\d"))
#                 || (str_detect(input[i], "20\\d\\d")))
#     if (is_year){
#       year <- input[i]
#     }
#   }
# }
# q_i <- i
# 
# 
# 
#   for (i in 1:length(input)){
#     qu <- ((str_detect(input[i], "кварт")))
#     if (qu){
#       q_i <- i
#       break
#     }
#   }
#   
#   if ((input[q_i -1] == "первый") || (input[q_i -1] == "1-й")){
#     number = "1"
#   } else if ((input[q_i -1] == "последний" || input[q_i -1] == "четвертый") || (input[q_i -1] == "последнего") || (input[q_i -1] == "последнем") ){
#     number = "4"
#   } else if (input[q_i -1] == "второй" || input[q_i -1] == "второго" || input[q_i -1] == "II" || input[q_i -1] == "2-й"){
#     number = "2"
#   } else if ((input[q_i -1] == "третий" || input[q_i -1] == "третьего") || (input[q_i -1] == "3-го") || (input[q_i -1] == "3-й") ){
#     number = "4"
#   }
# 
#   res <- str_glue(year, '-Q', number)
#   return(res)



##### choose function #####
# 
# # quartals 
# q = FALSE;
# for(i in 1:length(input)){
#   if (input[i] == "квартал" || input[i] == "квартала"){
#     q = TRUE;
#   }
# }

# period
# per <- c("за", "протяжении", "уикенд", "напролет", "субботу-воскресенье", "c")
# 
# p = FALSE;
# for(i in 1:length(input)){
#   if (input[i] %in% c(per)){
#     p = TRUE;
#   }
# }


work <- function(input){
  
# today
today_words <- c("сегодня", "сегодняшнего", "сегодняшний",
                 "сегодняшним", "сейчас", "этот", "сего", 
                 "настоящий", "минуту")

t = FALSE
for(i in 1:length(input)){
  if (input[i] %in% c(today_words)){
    t = TRUE;
  }
}

# yesterday
yesterday_words <- c("вчера", "накануне")
y = FALSE
for(i in 1:length(input)){
  if (input[i] %in% c(yesterday_words)){
    y = TRUE;
  }
}

t = FALSE
for(i in 1:length(input)){
  if (input[i] %in% c(today_words)){
    t = TRUE;
  }
}

# chosing function
  
  # # quartals 
  # q = FALSE;
  # for(i in 1:length(input)){
  #   if (input[i] == "квартал" || input[i] == "квартала"){
  #     q = TRUE;
  #   }
  # }
  
  # period
  # per <- c("за", "протяжении", "уикенд", "напролет", "субботу-воскресенье", "c")
  # 
  # p = FALSE;
  # for(i in 1:length(input)){
  #   if (input[i] %in% c(per)){
  #     p = TRUE;
  #   }
  # }
  
  # today
  
  if (t) {
    result <- today(input)
  } else if (y) {
    result <- yesterday(input)
  } else {
    result <- return_date_str(input)
  }
  return (result)
}

work(input)

##### writing to csv #####

in_csv <- data.frame(read.csv("submission_input.csv", encoding="UTF-8"))
in_csv$Expected <- "2020-11-27T2:30"

c = list()

for(i in 1:388){
    c = unlist(as.character(in_csv$Id[i]), ' ')
  if (i != 78){
      in_csv$Expected[i] = as.character(work(c))
  }
}

typeof(work(input))

typeof(as.character(work(input)))

write.csv(in_csv, 'submission.csv', row.names=FALSE, fileEncoding="UTF-8")

View(in_csv)
##### PYTHON #####



